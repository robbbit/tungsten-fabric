heat_template_version: 2015-04-30

description: Heat template to create a v2 service chain

parameters:

  mgmt_network_name:
    type: string
    description: Name of management network to be created
    
  left_network_name:
    type: string
    description: Name of left network to be created
    
  right_network_name:
    type: string
    description: Name of right network to be created
    
  mgmt_vn_prefix:
    type: string
    description: Name of mgmt vn_prefix to be created
    
  mgmt_vn_prefix_len:
    type: string
    description: Name of mgmt vn_prefix_len to be created
    
  left_vn_prefix:
    type: string
    description: Name of left vn_prefix to be created
    
  left_vn_prefix_len:
    type: string
    description: Name of left vn_prefix_len to be created
    
  right_vn_prefix:
    type: string
    description: Name of right vn_prefix to be created
    
  right_vn_prefix_len:
    type: string
    description: Name of right vn_prefix_len to be created
    
  left_vn_rt:
    type: string
    description: Name of left vn_rt to be added
    
  right_vn_rt:
    type: string
    description: Name of right vn_rt to be added
    
  service_policy_name: 
    type: string
    description: Name of the Service Policy 
    
  simple_action:
    type: string
    description: Pass or Deny
    
  protocol:
    type: string
    description: Protocol
    
  src_port_end:
    type: number
    description: End of the Source Port Range
    
  src_port_start:
    type: number
    description: Start of the Source Port Range
    
  direction:
    type: string
    description: Direction of the Policy
    
  dst_port_end:
    type: number
    description: End of the Destination Port Range
    
  dst_port_start:
    type: number
    description: Start of the Destination Port Range

  service_template_name:
    type: string
    description: Service template Name
    
  service_template_properties_version:
    type: string
    description: Indicates service version
    
  service_template_properties_service_mode:
    type: string
    description: service mode
    
  service_template_properties_service_type:
    type: string
    description: service type
    
  service_template_properties_image_name:
    type: string
    description: Name of the image
    
  service_template_properties_flavor:
    type: string
    description: Flavor
    
  service_template_properties_service_scaling:
    type: string
    description: Indicates whether service scaling is enabled
    
  service_template_properties_ordered_interfaces:
    type: string
    description: Indicates service interfaces are ordered
    
  service_template_properties_service_virtualization_type:
    type: string
    description: Indicates virtualization type

  service_template_properties_interface_type_service_interface_type_1:
    type: string
    description: service_interface_type for the ServiceTemplate

  service_template_properties_interface_type_service_interface_type_2:
    type: string
    description: service_interface_type for the ServiceTemplate

  service_template_properties_interface_type_service_interface_type_3:
    type: string
    description: service_interface_type for the ServiceTemplate

  service_instance_name: 
    type: string
    description: Name of the Service Instance

  port_tuple_name:
    type: string
    description: Name of the port tuple

  domain:
    type: string
    description: Name of the Domain

  tenant:
    type: string
    description: Name of the tenant

  policy_fq_name:
    type: string
    description: FQDN of the Policy

  service_instance_fq_name:
    type: string
    description: Service instance FQDN for port tuple
 
resources:
  template_NetworkIpam_1:
    type: OS::ContrailV2::NetworkIpam
    properties:
      name: { get_param: mgmt_network_name }

  template_NetworkIpam_2:
    type: OS::ContrailV2::NetworkIpam
    properties:
      name: { get_param: left_network_name }

  template_NetworkIpam_3:
    type: OS::ContrailV2::NetworkIpam
    properties:
      name: { get_param: right_network_name }

  template_VirtualNetwork_1:
    type: OS::ContrailV2::VirtualNetwork
    depends_on: [ template_NetworkIpam_1 ]
    properties:
      name: { get_param: mgmt_network_name }
      network_ipam_refs: [{ get_resource: template_NetworkIpam_1 }]
      network_ipam_refs_data:
        [{
          network_ipam_refs_data_ipam_subnets:
            [{
              network_ipam_refs_data_ipam_subnets_subnet:
                {
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix: { get_param: mgmt_vn_prefix },
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len: { get_param: mgmt_vn_prefix_len },
                },
              network_ipam_refs_data_ipam_subnets_addr_from_start: true
            }]
         }]

  template_VirtualMachineInterface_1:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [ template_PortTuple ]
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: 'management'
        }
      port_tuple_refs: [{ get_resource: template_PortTuple }]
      virtual_network_refs: [{ list_join: [':', { get_attr: [ template_VirtualNetwork_1, fq_name ] } ] }]

  template_InstanceIp_1:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_1, template_VirtualNetwork_1 ]
    properties:
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_1 }]
      virtual_network_refs: [{ list_join: [':', { get_attr: [ template_VirtualNetwork_1, fq_name ] } ] }]

  template_VirtualNetwork_2:
    type: OS::ContrailV2::VirtualNetwork
    depends_on: [ template_NetworkIpam_2, template_NetworkPolicy ]
    properties:
      name: { get_param: left_network_name }
      network_ipam_refs: [{ get_resource: template_NetworkIpam_2 }]
      flood_unknown_unicast: true
      virtual_network_properties:
        {
          virtual_network_properties_forwarding_mode: l2_l3,
          virtual_network_properties_rpf: disable
        }
      route_target_list:
        route_target_list_route_target: [ { get_param: left_vn_rt } ]
      network_ipam_refs_data:
        [{
          network_ipam_refs_data_ipam_subnets:
            [{
              network_ipam_refs_data_ipam_subnets_subnet:
                {
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix: { get_param: left_vn_prefix },
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len: { get_param: left_vn_prefix_len },
                },
               network_ipam_refs_data_ipam_subnets_addr_from_start: true
            }]
         }]
      network_policy_refs: [ { get_param: policy_fq_name } ]
      network_policy_refs_data:
        [{
          network_policy_refs_data_sequence:
            {
              network_policy_refs_data_sequence_major: 0,
              network_policy_refs_data_sequence_minor: 0,
            },
        }]
        

  template_VirtualMachineInterface_2:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [ template_PortTuple ]
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: 'left'
        }
      port_tuple_refs: [{ get_resource: template_PortTuple }]
      virtual_network_refs: [{ list_join: [':', { get_attr: [ template_VirtualNetwork_2, fq_name ] } ] }]

  template_InstanceIp_2:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_2, template_VirtualNetwork_2 ]
    properties:
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_2 }]
      virtual_network_refs: [{ list_join: [':', { get_attr: [ template_VirtualNetwork_2, fq_name ] } ] }]

  template_VirtualNetwork_3:
    type: OS::ContrailV2::VirtualNetwork
    depends_on: [ template_NetworkIpam_3, template_NetworkPolicy ]
    properties:
      name: { get_param: right_network_name }
      network_ipam_refs: [{ get_resource: template_NetworkIpam_3 }]
      flood_unknown_unicast: true
      virtual_network_properties:
        {
          virtual_network_properties_forwarding_mode: l2_l3,
          virtual_network_properties_rpf: disable
        }
      route_target_list:
        route_target_list_route_target: [ { get_param: right_vn_rt } ]
      network_ipam_refs_data:
        [{
          network_ipam_refs_data_ipam_subnets:
            [{
              network_ipam_refs_data_ipam_subnets_subnet:
                {
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix: { get_param: right_vn_prefix },
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len: { get_param: right_vn_prefix_len },
                },
              network_ipam_refs_data_ipam_subnets_addr_from_start: true
            }]
         }]
      network_policy_refs: [{ get_param: policy_fq_name }]
      network_policy_refs_data:
        [{
          network_policy_refs_data_sequence:
            {
              network_policy_refs_data_sequence_major: 0,
              network_policy_refs_data_sequence_minor: 0,
            },
        }]

  template_VirtualMachineInterface_3:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [ template_PortTuple ]
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: 'right'
        }
      port_tuple_refs: [{ get_resource: template_PortTuple }]
      virtual_network_refs: [{ list_join: [':', { get_attr: [ template_VirtualNetwork_3, fq_name ] } ] }]

  template_InstanceIp_3:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_3, template_VirtualNetwork_3 ]
    properties:
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_3 }]
      virtual_network_refs: [{ list_join: [':', { get_attr: [ template_VirtualNetwork_3, fq_name ] } ] }]

  template_ServiceTemplate:
    type: OS::ContrailV2::ServiceTemplate
    properties:
      name: { get_param: service_template_name }
      service_template_properties:
        {
          service_template_properties_version: { get_param: service_template_properties_version },
          service_template_properties_service_mode: { get_param: service_template_properties_service_mode },
          service_template_properties_service_type: { get_param: service_template_properties_service_type },
          service_template_properties_image_name: { get_param: service_template_properties_image_name },
          service_template_properties_service_scaling: { get_param: service_template_properties_service_scaling },
          service_template_properties_interface_type:
            [
              {
              service_template_properties_interface_type_service_interface_type: { get_param: service_template_properties_interface_type_service_interface_type_1 },
              },
              {
              service_template_properties_interface_type_service_interface_type: { get_param: service_template_properties_interface_type_service_interface_type_2 },
              },
              {
              service_template_properties_interface_type_service_interface_type: { get_param: service_template_properties_interface_type_service_interface_type_3 },
              }
            ],
          service_template_properties_flavor: { get_param: service_template_properties_flavor },
          service_template_properties_ordered_interfaces: { get_param: service_template_properties_ordered_interfaces },
          service_template_properties_service_virtualization_type: { get_param: service_template_properties_service_virtualization_type },
        }
      domain: { get_param: domain }

  template_ServiceInstance:
    type: OS::ContrailV2::ServiceInstance
    depends_on: [ template_ServiceTemplate ]
    properties:
      name: { get_param: service_instance_name }
      service_instance_properties:
        {
          service_instance_properties_interface_list:
            [
              {
                service_instance_properties_interface_list_virtual_network:
                 {
                   list_join: [':', { get_attr: [ template_VirtualNetwork_1, fq_name ] } ]
                 },
              },
              {
              service_instance_properties_interface_list_virtual_network:
                {
                   list_join: [':', { get_attr: [ template_VirtualNetwork_2, fq_name ] } ]
                },
              },
              {
              service_instance_properties_interface_list_virtual_network:
                {
                   list_join: [':', { get_attr: [ template_VirtualNetwork_3, fq_name ] } ]
                },
              }
            ],
        }
      service_template_refs: [{ get_resource: template_ServiceTemplate }]

  template_PortTuple:
    type: OS::ContrailV2::PortTuple
    depends_on: [ template_ServiceInstance ]
    properties:
      name: { get_param: port_tuple_name }
      service_instance: { list_join: [':', { get_attr: [ template_ServiceInstance, fq_name ] } ] }

  instance:
    type: OS::Nova::Server
    depends_on: [ template_InstanceIp_1, template_InstanceIp_2, template_InstanceIp_3 ]
    properties:
      name: {get_param: service_instance_name }
      image: { get_param:  service_template_properties_image_name }
      flavor: { get_param: service_template_properties_flavor }
      networks:
        - port: { get_resource: template_VirtualMachineInterface_1 }
        - port: { get_resource: template_VirtualMachineInterface_2 }
        - port: { get_resource: template_VirtualMachineInterface_3 }
      config_drive: true
      user_data_format: RAW
      user_data:
        get_file: "/root/heat-scripts/vsrx-cfg.txt"


  template_NetworkPolicy:
    type: OS::ContrailV2::NetworkPolicy
    properties:
      name: { get_param: service_policy_name }
      network_policy_entries: { network_policy_entries_policy_rule: [{
                network_policy_entries_policy_rule_direction: { get_param: direction },
                network_policy_entries_policy_rule_protocol: { get_param: protocol },
                network_policy_entries_policy_rule_src_ports: [{
                        network_policy_entries_policy_rule_src_ports_start_port: { get_param: src_port_start },
                        network_policy_entries_policy_rule_src_ports_end_port: { get_param: src_port_end }
                                                               }],
                network_policy_entries_policy_rule_dst_ports: [{
                        network_policy_entries_policy_rule_dst_ports_start_port: { get_param: dst_port_start },
                        network_policy_entries_policy_rule_dst_ports_end_port: { get_param: dst_port_end }
                                                              }],
                network_policy_entries_policy_rule_dst_addresses: [{
                        network_policy_entries_policy_rule_dst_addresses_virtual_network: { list_join: [':', [ {get_param: domain}, {get_param: tenant}, {get_param: right_network_name} ]] }
                                                                  }],
                network_policy_entries_policy_rule_src_addresses: [{
                        network_policy_entries_policy_rule_src_addresses_virtual_network: { list_join: [':', [ {get_param: domain}, {get_param: tenant}, {get_param: left_network_name} ]] }
                                                                  }],
                network_policy_entries_policy_rule_action_list: {
                        network_policy_entries_policy_rule_action_list_simple_action: { get_param: simple_action },
                        network_policy_entries_policy_rule_action_list_apply_service: 
                                                                        [{ get_param: service_instance_fq_name }],
                        network_policy_entries_policy_rule_action_list_log: true
                                                                 },
                                                                      }]
        }

outputs:
  vsrx_mgmt_ip:
    description: vSRX management ip
    value: { get_attr: [ template_InstanceIp_1, instance_ip_address]}
  vsrx_left_vn_ip:
    description: vSRX left-vn ip
    value: { get_attr: [ template_InstanceIp_2, instance_ip_address]}
  vsrx_right_vn_ip:
    description: vSRX right-vn ip
    value: { get_attr: [ template_InstanceIp_3, instance_ip_address]}
